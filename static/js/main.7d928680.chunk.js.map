{"version":3,"sources":["Components/Images/mustashe.jpg","hoc/Aux.js","Components/Picture.js","Components/Contact.js","Components/Layouts/Layout.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","aux","props","children","style","useStyles","makeStyles","theme","root","display","justifyContent","marginTop","margin","spacing","small","width","height","large","ImageAvatar","classes","className","Avatar","css","alt","src","photo","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","SimpleExpansionPanel","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","Typography","ExpansionPanelDetails","spaces","marginRight","color","iconB","Layout","Aux","href","icon","faGithub","size","faSpotify","faTwitter","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7d928680.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mustashe.e4f713b2.jpg\";","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar'; \nimport photo from './Images/mustashe.jpg';\nimport { css } from '@emotion/core'\n\nconst style = css`\nbox-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12);\n`\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n}));\n\nexport default function ImageAvatar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Avatar css={ style } alt=\"Phil Vellacott\" src={photo} className={classes.large} />\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { css } from '@emotion/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nexport default function SimpleExpansionPanel() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}\n      css={css`\n      width: 50%;\n      \n    `}\n    >\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography className={classes.heading}>Contact me</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography>\n            vellacott.phil@gmail.com\n          </Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n \n  );\n}","import React from 'react';\nimport Aux from '../../hoc/Aux';\nimport ImageAvatar from '../Picture';\nimport './Layouts.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faSpotify, faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nimport SimpleExpansionPanel from '../Contact'\n\nconst spaces = {\n    marginRight: '10px',\n    color: 'black',\n}\n\nconst iconB = {\n    color: 'black',\n}\n\n\nconst WEB_URL = \"https://github.com/pvellacott\";\nconst SPOT_URL = \"https://open.spotify.com/user/12174613455\"\nconst TWIT_URL = \"https://twitter.com/phil_vellacott\"\n\nconst Layout = ( props ) => (    \n<Aux>\n\n        <main>\n             {props.children}\n                <ImageAvatar></ImageAvatar>\n                <center>\n                    <div className=\"iconz\">\n                            <a href={WEB_URL}><FontAwesomeIcon icon={ faGithub } size=\"lg\" style={ spaces } /></a>\n                            <a href={SPOT_URL}><FontAwesomeIcon icon={ faSpotify } size=\"lg\" style={ spaces } /></a>\n                            <a href={TWIT_URL}><FontAwesomeIcon icon={ faTwitter } size=\"lg\" style={ iconB } /></a>\n                    </div>\n                </center>\n             <center>\n                 <h1>Hi, I'm Phil.</h1>\n                 <SimpleExpansionPanel></SimpleExpansionPanel>\n             </center>\n           \n        </main>\n</Aux>\n    \n);\n\nexport default Layout;","import React from 'react';\nimport './App.css';\n\nimport Layout from './Components/Layouts/Layout'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        \n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}